name: Build Test Release
on:
  pull_request:
    branches:
      - main
  push:
    # Push only works for tags in the main branch.
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-dev-docker-image:
    # This docker image is essential for all other steps
    name: Build development docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      #- name: Acquire cache
        #run: |
          #echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          #docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:latest

      - name: Ensure cachability
        run: |
          cp pyproject.toml pyproject.toml.mod
          # otherwise the first layer changes and invalidates the cache
          # even though the dependencies have not changed at all
          sed -i 's/^version = ".*"$/version = "0.0.1"/' pyproject.toml.mod 

      - name: Build docker image
        run: |
          docker build \
            --tag docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            --cache-from docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:latest \
            .

      - name: Deploy
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6}

  deploy-image-for-cache:
    name: Deploy :latest env container
    needs: build-dev-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Acquire docker environment image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6}

      - name: Deploy image with latest tag
        run: |
          docker tag docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:latest
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:latest

  release-dev-docker-image:
    name: Release development docker image
    #
    # Releases development image as official development image by tagging
    # it as "latest".
    #
    # Only happens when PR is merged into main or when something is pushed
    # into main branch.
    #
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    needs: build-dev-docker-image
    steps:
      - name: Acquire docker environment image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6}

      - name: Tag and push image with "latest" tag
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6}

          docker tag \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:latest

          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6}
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:latest

      - name: Tag and push image with git tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6}

          docker tag \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_SHA:0:6} \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_REF#refs/tags/}

          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-dev:${GITHUB_REF#refs/tags/}

  check-line-endings:
    name: Check CRLF line endings
    runs-on: ubuntu-latest
    needs: build-dev-docker-image
    steps:
      - name: Checkout repository contents
        uses: actions/checkout@v1

      - name: Use action to check for CRLF endings
        uses: erclu/check-crlf@v1
    
  run-tests:
    name: Verify code
    runs-on: ubuntu-latest
    needs: build-dev-docker-image
    steps:
      - name: Acquire docker environment image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6}

      - name: Run pytest tests
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            poetry run pytest

      - name: Run mypy tests
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            bash -c '! poetry run mypy --strict dtcli | grep "Module has no attribute"'

      - name: Run flake8 lint checker
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            poetry run flake8 dtcli
            # TODO: change above to make

      - name: Run test coverage report
        run: |
          docker run \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            poetry run pytest --cov . --cov-report html || true

  build-package:
    name: Build package
    #
    # Builds python package using poetry.
    #
    runs-on: ubuntu-latest
    needs: build-dev-docker-image
    steps:
      - name: Acquire docker environment image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6}

      - name: Build package
        run: |
          mkdir dist
          docker run \
            -v $(pwd)/dist:/app/dist \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            poetry build

      - name: Cache built package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: |
            dist/*

  build-linux-binary:
    name: Build linux binary
    runs-on: ubuntu-latest
    needs: build-dev-docker-image
    steps:
      - name: Acquire docker environment image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6}

      - name: Build binary distribution
        run: |
          mkdir dist
          docker run \
            -v $(pwd)/dist:/app/dist \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            poetry run pyinstaller \
                dtcli/__main__.py \
                --name dt \
                --clean \
                -p "$(poetry env info -p)/lib/python3.9/site-packages" \
                --onefile

      - name: Cache built linux binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-binary
          path: |
            dist/dt

  github-release:
    name: Create GitHub release
    #
    # Creates GitHub release with binaries and packages.
    #
    # Only happens for tags.
    #
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - build-package
      - build-linux-binary
    steps:
      - uses: actions/checkout@v2

      - name: Download cached build artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Generate changelog
        run: |
          cat > CHANGELOG.md <<EOT
          ## CHANGELOG

          **Release**: dt-cli (${GITHUB_REF#refs/tags/})

          ### Changes

          EOT
          git log --format=format:"%s" >> CHANGELOG.md

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/package/*
            artifacts/linux-binary/*
            LICENSE
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - build-package
    steps:
      - name: Acquire docker environment image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6}

      - name: Download cached built package
        uses: actions/download-artifact@v2
        with:
          name: package
          path: dist

      - name: Publish to PyPI
        env:
          PYPI_TOKEN: "${{ secrets.PYPI_TOKEN }}"
        run: |
          docker run \
            -v "$(pwd)/dist:/app/dist" \
            docker.pkg.github.com/$GITHUB_REPOSITORY/dtcli-env:${GITHUB_SHA:0:6} \
            poetry publish --username __token__ --password "$PYPI_TOKEN"
